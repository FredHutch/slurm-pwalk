### db functions
## module

## creates
# note that foreign keys are avoided for performance reasons
function create_source_table {
  # storcrawl table of fs sources (key: server+export/share)
  psql $db_conn_str -c "CREATE TABLE IF NOT EXISTS ${STORCRAWLDB_SOURCE_TABLE}(
                          id SERIAL,
                          server TEXT,
                          export TEXT,
                          PRIMARY KEY(server, export))"
}

function create_file_table {
  # trying single table again
  psql $db_conn_str -c "CREATE TABLE IF NOT EXISTS ${STORCRAWLDB_FILE_TABLE}(
                          fs_id INT NOT NULL,
                          owner TEXT,
                          st_ino BIGINT NOT NULL,
                          parent_inode BIGINT NOT NULL,
                          directory_depth INT NOT NULL,
                          filename text,
                          fileextension TEXT,
                          st_uid BIGINT NOT NULL,
                          st_gid BIGINT NOT NULL,
                          st_size BIGINT NOT NULL,
                          st_blocks BIGINT NOT NULL,
                          st_mode TEXT NOT NULL,
                          st_atime DOUBLE PRECISION NOT NULL,
                          st_mtime DOUBLE PRECISION NOT NULL,
                          st_ctime DOUBLE PRECISION NOT NULL,
                          count INT NOT NULL,
                          sum BIGINT NOT NULL)"
  psql $db_conn_str -c "CREATE INDEX ON ${STORCRAWLDB_FILE_TABLE}(fs_id,st_ino)"
  psql $db_conn_str -c "CREATE INDEX ON ${STORCRAWLDB_FILE_TABLE}(owner)"
  #psql $db_conn_str -c "CREATE INDEX ON ${STORCRAWLDB_FILE_TABLE}(filename)"
  #psql $db_conn_str -c "CREATE INDEX ON ${STORCRAWLDB_FILE_TABLE}(fileextension)"
  psql $db_conn_str -c "CREATE INDEX ON ${STORCRAWLDB_FILE_TABLE}(st_uid,st_gid)"
  psql $db_conn_str -c "CREATE INDEX ON ${STORCRAWLDB_FILE_TABLE}(st_atime,st_mtime)"
  psql $db_conn_str -c "CREATE INDEX ON ${STORCRAWLDB_FILE_TABLE}(count)"
  psql $db_conn_str -c "CREATE INDEX ON ${STORCRAWLDB_FILE_TABLE}(sum)"
}

function create_log_table {
  # per crawl log table
  psql $db_conn_str -c "CREATE TABLE IF NOT EXISTS ${STORCRAWLDB_LOG_TABLE}(
                          id SERIAL,
                          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                          array_job_id BIGINT NOT NULL,
                          job_id BIGINT NOT NULL,
                          array_idx BIGINT NOT NULL,
                          log_msg TEXT NOT NULL,
                          PRIMARY KEY(id))"
}

function create_folder_table {
  # per crawl table of crawl folers/paths
  psql $db_conn_str -c "CREATE TABLE IF NOT EXISTS ${STORCRAWLDB_FOLDER_TABLE}(
                          id SERIAL,
                          added TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                          started TIMESTAMP WITH TIME ZONE,
                          finished TIMESTAMP WITH TIME ZONE,
                          folder TEXT NOT NULL,
                          PRIMARY KEY(id))"
}

function create_report_table {
  # per crawl report of crawl statistics
  psql $db_conn_str -c "CREATE TABLE IF NOT EXISTS ${STORCRAWLDB_REPORT_TABLE}(
                          id SERIAL,
                          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                          key TEXT NOT NULL,
                          value TEXT NOT NULL,
                          PRIMARY KEY(id))"
}

function create_storcrawldb_views {
  # will need update for new tables
  # dynamic view used as pointed to most recent results
  psql $db_conn_str -c "CREATE OR REPLACE VIEW $STORCRAWLDB_VIEW AS
                          SELECT
                            st_ino AS inode,
                            parent_inode,
                            owner,
                            directory_depth,
                            filename,
                            fileextension,
                            st_uid AS UID,
                            st_gid AS GID,
                            st_size,
                            st_blocks,
                            st_mode,
                            st_atime AS atime,
                            st_mtime AS mtime,
                            st_ctime AS ctime,
                            count,
                            sum
                          FROM
                            $STORCRAWLDB_FILE_TABLE"

  # materialized view of owner report
  owner_view=$(psql $db_conn_str -t -A -c "SELECT relkind from pg_class
                                           WHERE relname = 'usage_by_owner'")
  if [ "${owner_view}" == "m" ]
  then
    psql $db_conn_str -c "DROP MATERIALIZED VIEW usage_by_owner"
  fi
  psql $db_conn_str -c "CREATE MATERIALIZED VIEW usage_by_owner AS
                        SELECT
                        owner,
                        round(sum(sum/1024.0/1024.0/1024.0/1024.0),2) AS tb,
                        sum(count) as files
                        FROM $STORCRAWLDB_FILE_TABLE
                        WHERE count > -1 AND
                        owner != 'REDUNDANT' AND
                        owner != 'UNKNOWN'
                        GROUP BY owner
                        HAVING sum(sum)>1073741824"
  psql $db_conn_str -c "GRANT SELECT ON usage_by_owner TO $db_ro_user"

  # materialized view of large (>1GB) folders
  folder_view=$(psql $db_conn_str -t -A -c "SELECT relkind from pg_class
                                            WHERE relname = 'big_folders'")
  if [ "${folder_view}" == "m" ]
  then
    psql $db_conn_str -c "DROP MATERIALIZED VIEW big_folders"
  fi
  psql $db_conn_str -c "CREATE MATERIALIZED VIEW big_folders AS
                        SELECT
                        fm.owner AS owner,
                        um.name AS name,
                        fm.filename AS foldername,
                        to_timestamp(fm.st_mtime) AS mtime,
                        to_timestamp(fm.st_atime) AS atime,
                        fm.sum/1073741824 AS gb
                        FROM
                        $STORCRAWLDB_FILE_TABLE fm,
                        uid_mapping_$STORCRAWLDB_TAG um
                        WHERE
                        fm.owner != 'REDUNDANT' AND
                        fm.owner != 'UNKNOWN' AND
                        fm.st_uid = um.uid AND
                        fm.count > -1 AND
                        fm.sum > 1073741824 AND
                        fm.filename NOT LIKE '/home/%'"
  psql $db_conn_str -c "GRANT SELECT ON big_folders TO $db_ro_user"
}

## roles
function check_ro_user {
  my_role=$(psql $db_conn_str -t -A -F, -c "SELECT usename from pg_user where usename = '${db_ro_user}'")
  if [ -z "${my_role}" ]
  then
    psql $db_conn_str -c "CREATE ROLE ${db_ro_user} LOGIN PASSWORD '${db_ro_password}'"
  fi
}
function update_ro_grants {
  storcrawl_log $FUNCNAME
  my_role=$(psql $db_conn_str -t -A -F, -c "SELECT usename from pg_user where usename = '${db_ro_user}'")
  if [ -z "${my_role}" ]
  then
    psql $db_conn_str -c "CREATE ROLE ${db_ro_user} LOGIN PASSWORD '${db_ro_password}'"
  fi
  psql $db_conn_str -c "GRANT SELECT ON $STORCRAWLDB_FILE_TABLE TO $db_ro_user"
  psql $db_conn_str -c "GRANT SELECT ON $STORCRAWLDB_SOURCE_TABLE TO $db_ro_user"
  psql $db_conn_str -c "GRANT SELECT ON $STORCRAWLDB_FOLDER_TABLE TO $db_ro_user"
  psql $db_conn_str -c "GRANT SELECT ON $STORCRAWLDB_LOG_TABLE TO $db_ro_user"
  psql $db_conn_str -c "GRANT SELECT ON $STORCRAWLDB_REPORT_TABLE TO $db_ro_user"
  psql $db_conn_str -c "GRANT SELECT ON $STORCRAWLDB_VIEW TO $db_ro_user"
}

## drops

function drop_table {
  storcrawl_log "Dropping table $1"
  psql $db_conn_str -c "DROP TABLE IF EXISTS $1"
}

function drop_view {
  storcrawl_log "Dropping view $1"
  psql $db_conn_str -c "DROP VIEW $1"
}

## queries

function storcrawl_log {
  psql $db_conn_str -c "INSERT INTO ${STORCRAWLDB_LOG_TABLE}(array_job_id,job_id,array_idx,log_msg) values('${SLURM_ARRAY_JOB_ID:-0}','${SLURM_JOB_ID:-0}','${SLURM_ARRAY_TASK_ID:-0}','$1')"
}

function check_tag {
  # check the given tag to see if it exists
  IFS=, read exists <<<$(psql $db_conn_str -t -A -c "SELECT EXISTS (SELECT 1 FROM information_schema.tables
                                                                    WHERE table_schema = 'public'
                                                                    AND table_name = '$STORCRAWLDB_STAT_TABLE')")
  if [ "$exists" == "t" ]
  then
    error_exit "A table with tag $STORCRAWLDB_STAT_TABLE exists, aborting!"
  fi
}

function check_last_crawl {
  # read the report from the last crawl to ensure it completed
  last_tag=$(psql $db_conn_str -t -A -c "SELECT SUBSTRING(table_name, '([0-9]+)$') FROM information_schema.tables
                                           WHERE table_name LIKE '${file_tbl}%'
                                           ORDER BY table_name desc
                                           LIMIT 1")
  if [[ "$last_tag" =~ "^[0-9]+$" ]]
  then
    last_tag_status=$(psql $db_conn_str -t -A -c "SELECT EXISTS (SELECT 1 FROM information_schema.tables
                                                                 WHERE table_name LIKE '${report_tbl}_${last_tag}')")
    if [ "$last_tag_status" == "f" ]
    then
      error_exit "Crawl $last_tag did not finish"
    fi
  fi
}

function get_source_id {
  # get_id $server $export
  # return an id for the given server+export
  myID=$(psql $db_conn_str -1 -t -A -c "LOCK TABLE ${STORCRAWLDB_SOURCE_TABLE} IN ACCESS EXCLUSIVE MODE;
                                        INSERT INTO ${STORCRAWLDB_SOURCE_TABLE}(server,export)
                                        VALUES('${1}','${2}') ON CONFLICT (server,export) DO UPDATE
                                        SET server='${1}', export='${2}'
                                        RETURNING id")
  pwalk_source_id="$myID"
  storcrawl_log "$FUNCNAME: ${1}:${2} = ${pwalk_source_id}"
}

function add_folder {
  # add a path to the folder table
  # check exclude_paths
  excl=0
  echo "$exclude_paths" | while read xp
  do
    if [ "${xp}" = "${1}" ]
    then
      excl=1
    fi
  done
  if [ "$excl" -eq "0" ]
  then
    psql $db_conn_str -1 -t -A -c "INSERT INTO ${STORCRAWLDB_FOLDER_TABLE} (folder)
                                   VALUES ('$1')"
  else
    echo "Skipping folder $1"
  fi
}

function folder_crawl_start {
  # update timestamp for finished crawl based on $SLURM_ARRAY_TASK_ID
  psql $db_conn_str -1 -t -A -c "UPDATE ${STORCRAWLDB_FOLDER_TABLE}
                              SET started = current_timestamp
                              WHERE id = ${SLURM_ARRAY_TASK_ID}"
}

function folder_crawl_finish {
  # update timestamp for finished crawl by folder name
  psql $db_conn_str -1 -t -A -c "UPDATE ${STORCRAWLDB_FOLDER_TABLE}
                              SET finished = current_timestamp
                              WHERE folder = '${pwalk_start_path}'"
}

function get_folder {
  # set pwalk_start_path to next unstarted folder from table
  pwalk_start_path=$(psql $db_conn_str -1 -t -A -c "LOCK TABLE $STORCRAWLDB_FOLDER_TABLE IN ACCESS EXCLUSIVE MODE;
                                                    UPDATE $STORCRAWLDB_FOLDER_TABLE
                                                    SET started=current_timestamp
                                                    WHERE id = (SELECT id FROM $STORCRAWLDB_FOLDER_TABLE
                                                                WHERE started IS NULL LIMIT 1)
                                                    RETURNING folder")
}

function get_job_array_size {
  # pull the number of folders from folder table
  STORCRAWLDB_JOB_ARRAY_SIZE=$(psql $db_conn_str -t -A -c "SELECT COUNT(*) FROM $STORCRAWLDB_FOLDER_TABLE")
  echo "total jobs ${STORCRAWLDB_JOB_ARRAY_SIZE}"
}

function list_tags {
  # display all tags with tables in the DB
  search_str=$(echo "${file_tbl}" | tr '_' '\_')
  psql $db_conn_str -t -A -c "SELECT SUBSTRING(table_name, '([0-9]+)$') FROM information_schema.tables
                        WHERE table_name LIKE '${search_str}%'
                        ORDER BY table_name"
}

function remove_tag {
  remove_view
  problem=$(psql $db_conn_str -t -A -c "SELECT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.VIEWS WHERE view_definition like '%${1}%')")
  if [ "$problem" == "f" ]
  then
    for tbl_prefix in $file_tbl $folder_tbl $log_tbl $report_tbl $source_tbl
    do
      table_name="${tbl_prefix}${1}"
        psql $db_conn_str -t -A -c "DROP TABLE $table_name"
        echo "removed table ${table_name} for TAG ${1}"
    done
    run_scripts "${remove_script_dir}"
  else
    echo "${1} appears to be the 'live' tag, unable to remove"
  fi
}

function remove_view {
  if [ "$forced" == "yes" ]
  then
    psql $db_conn_str -t -A -c "DROP VIEW file_metadata"
  fi
}

function print_log {
  psql $db_conn_str -t -A -F, -c "SELECT * FROM ${STORCRAWLDB_LOG_TABLE}"
}

function print_report {
  psql $db_conn_str -t -A -F, -c "SELECT timestamp,key,value FROM ${STORCRAWLDB_REPORT_TABLE}"
}

function print_folders {
  psql $db_conn_str -t -A -F, -c "SELECT folder FROM ${STORCRAWLDB_FOLDER_TABLE}"
}

function report_kv {
  psql $db_conn_str -t -A -c "INSERT INTO ${STORCRAWLDB_REPORT_TABLE}(key,value)
                              VALUES('${1}','${2}')"
}

## meta

function init_storcrawldb {
  check_ro_user || error_exit "Unable to create read-only db user!"
}

function init_crawl {
  create_source_table || error_exit "Unable to create file export table!"
  create_folder_table || error_exit "Unable to create folder table!"
  #create_stat_table || error_exit "Unable to create stat table!"
  #create_meta_table || error_exit "Unable to create meta table!"
  create_file_table || error_exit "Unable to create file table!"
  create_log_table || error_exit "Unable to create log table!"
  create_report_table || error_exit "Unable to create report table!"
  storcrawl_log $FUNCNAME
  for v in $(compgen -A variable | grep STORCRAWLDB)
  do
    eval v_val=\$$v
    storcrawl_log "$v is $v_val"
  done
}

function drop_all_tables_for_tag {
  for i in $source_tbl $file_tbl $folder_tbl $log_tbl $report_tbl
  do
    drop_table "$i$1"
  done
}

function clean_tables {
  storcrawl_log $FUNCNAME
  tag_list=$(psql $db_conn_str -t -c "select (regexp_matches(table_name, '${file_tbl}([0-9]+$)'))[1] from information_schema.tables where table_name like '${file_tbl}%' order by table_name desc")

  for t in $tag_list
  do
    if [ "$storcrawl_keep" == 0 ]
    then
      drop_all_tables_for_tag "$t"
    else
      storcrawl_keep=$((storcrawl_keep - 1))
    fi
  done
}

function owner_report {
  psql $db_conn_str -t -A -F, -c "select din.owner, round(sum(fs.st_size)/1024.0/1024.0/1024.0/1024.0,2) from ${STORCRAWLDB_STAT_TABLE} fs, (select distinct(inode),owner from ${STORCRAWLDB_META_TABLE}) as din where fs.inode = din.inode group by din.owner"
}

function generate_report {
  storcrawl_log $FUNCNAME
  report_kv "tag" "$STORCRAWLDB_TAG"
  report_kv "total_sources" $(psql $db_conn_str -t -A -c "SELECT count(*) FROM ${STORCRAWLDB_SOURCE_TABLE}")
  report_kv "total_files" $(psql $db_conn_str -t -A -c "SELECT count(*) FROM ${STORCRAWLDB_FILE_TABLE}")
  report_kv "total_folders" $(psql $db_conn_str -t -A -c "SELECT count(*) FROM ${STORCRAWLDB_FOLDER_TABLE}")
  report_kv "total_bytes" $(psql $db_conn_str -t -A -c "SELECT sum(sum) FROM ${STORCRAWLDB_FILE_TABLE}")
  report_kv "total_TB" $(psql $db_conn_str -t -A -c "SELECT round(sum(sum)/1024.0/1024.0/1024.0/1024.0,2) FROM ${STORCRAWLDB_FILE_TABLE}")
  report_kv "total_owners" $(psql $db_conn_str -t -A -c "SELECT count(DISTINCT owner) FROM ${STORCRAWLDB_FILE_TABLE}")
  report_kv "crawl_time" $(psql $db_conn_str -t -A -c "SELECT
                                                       MAX(finished)-MIN(started)
                                                       FROM ${STORCRAWLDB_FOLDER_TABLE}")
  report_kv "avg_folder_crawl_time" $(psql $db_conn_str -t -A -c "SELECT
                                                                  AVG(finished-started)
                                                                  FROM ${STORCRAWLDB_FOLDER_TABLE}")
  report_kv "fastest_folder" $(psql $db_conn_str -t -A -c "SELECT folder
                                                           FROM ${STORCRAWLDB_FOLDER_TABLE}
                                                           WHERE finished-started = 
                                                           (SELECT MIN(finished-started)
                                                           FROM ${STORCRAWLDB_FOLDER_TABLE})")
  report_kv "slowest_folder" $(psql $db_conn_str -t -A -c "SELECT folder
                                                           FROM ${STORCRAWLDB_FOLDER_TABLE}
                                                           WHERE finished-started = 
                                                           (SELECT MAX(finished-started)
                                                           FROM ${STORCRAWLDB_FOLDER_TABLE})")
  report_kv "done" "done"
}
